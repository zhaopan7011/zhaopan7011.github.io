<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac终端常用命令</title>
    <url>/2020/01/07/Mac%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:23 GMT+0800 (中国标准时间) --><p><code>cd /Users/yishuihan/Desktop</code></p><h2 id="cd-文件路径-切换到某个路径下"><a href="#cd-文件路径-切换到某个路径下" class="headerlink" title="cd 文件路径 切换到某个路径下"></a>cd 文件路径 切换到某个路径下</h2><a id="more"></a><p><code>cd ../</code></p><h2 id="返回上一级路径"><a href="#返回上一级路径" class="headerlink" title="返回上一级路径"></a>返回上一级路径</h2><p><code>cd /</code></p><h2 id="返回到根目录"><a href="#返回到根目录" class="headerlink" title="返回到根目录"></a>返回到根目录</h2><p><code>mkdir zhaopan</code></p><h2 id="创建一个文件夹"><a href="#创建一个文件夹" class="headerlink" title="创建一个文件夹"></a>创建一个文件夹</h2><p><code>touch zhaopan.pages</code></p><h2 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h2><p><code>pwd</code></p><h2 id="输出当前路径名"><a href="#输出当前路径名" class="headerlink" title="输出当前路径名"></a>输出当前路径名</h2><p><code>ls</code></p><h2 id="输出当前路径下的所有文件"><a href="#输出当前路径下的所有文件" class="headerlink" title="输出当前路径下的所有文件"></a>输出当前路径下的所有文件</h2><p><code>ls -l</code></p><h2 id="输出当前文件下的所有文件-详细信息"><a href="#输出当前文件下的所有文件-详细信息" class="headerlink" title="输出当前文件下的所有文件 详细信息"></a>输出当前文件下的所有文件 详细信息</h2><p><code>open ./</code></p><h2 id="打开当前文件或文件夹"><a href="#打开当前文件或文件夹" class="headerlink" title="打开当前文件或文件夹"></a>打开当前文件或文件夹</h2><p><code>open ../</code></p><h2 id="打开上一级文件或文件夹"><a href="#打开上一级文件或文件夹" class="headerlink" title="打开上一级文件或文件夹"></a>打开上一级文件或文件夹</h2><p><code>clear</code></p><h2 id="清空页面"><a href="#清空页面" class="headerlink" title="清空页面"></a>清空页面</h2><p><code>who</code><br>##显示当前用户名</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>终端命令</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（五）</title>
    <url>/2020/01/07/C-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:23 GMT+0800 (中国标准时间) --><p><strong>const char 🌟 之间的关系</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="code"><pre><span class="line">const char *p;</span><br><span class="line">char const *pp;</span><br><span class="line">char * const<span class="built_in"> ppp </span>= nullptr;</span><br></pre></td></tr></table></figure></div><a id="more"></a><p><strong>如何判断系统是32位还是64位</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *ptr = <span class="number">0</span>;</span><br><span class="line">    ptr = &amp;i;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 判断一个指针的地址是多少 如果是是4 就是 32位 如果是 8 就是64位</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sizeof point = "</span>&lt;&lt;<span class="keyword">sizeof</span>(ptr)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对0 取反 </span></span><br><span class="line">    <span class="keyword">int</span> a = ~<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></div><p><strong>如何比较两个浮点数是否相等</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> EPSINON = <span class="number">0.00000001</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> x = <span class="number">48.93333</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> y = <span class="number">48.93333</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(x-y) &lt;= EPSINON) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"x == y"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"x != y"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（四）</title>
    <url>/2020/01/07/C-%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:23 GMT+0800 (中国标准时间) --><p><strong>函数重载</strong><br>函数不以返回值来区分重载函数<br>函数不以参数名来区分重载函数<br>使用重载函数的时候不要引起二义性<br>结构函数也可以重载<br>函数重载又叫编译时多态</p><a id="more"></a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;__FILE__&lt;&lt;__func__&lt;&lt;__LINE__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">square</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;__FILE__&lt;&lt;__FUNCTION__&lt;&lt;__LINE__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;__FILE__&lt;&lt;__func__&lt;&lt;__LINE__&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>多态：运行时多态</strong><br>定义一个基类的指针，指向子类的变量</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">width</span>, <span class="built_in">height</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">width</span> = a;</span><br><span class="line">        <span class="built_in">height</span> = b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent class area :"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    virtual int area() = 0;</span></span><br><span class="line"><span class="comment">//   纯 虚函数  = 0 告诉编译器 没有主题  因为实现多态 一般不需要实现父类中的虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectange</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rectange (<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b= <span class="number">0</span>) : Shape(a, b)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rectangle class area :"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">width</span> * <span class="built_in">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> :</span> <span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Triangle (<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b= <span class="number">0</span>):Shape(a, b)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Triangle class area :"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">width</span> * <span class="built_in">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">    Shape *shape;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Rectange <span class="title">rec</span><span class="params">(<span class="number">10</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">    <span class="function">Triangle <span class="title">tri</span><span class="params">(<span class="number">20</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  存储正方形的 地址</span></span><br><span class="line">    <span class="comment">// 调用的是 矩形的求面积公式</span></span><br><span class="line">    shape = &amp;rec;</span><br><span class="line">    shape-&gt;area();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用的三角形的求面积方法</span></span><br><span class="line">    shape = &amp;tri;</span><br><span class="line">    shape-&gt;area();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果基类中没有用virtual修饰， 那么 调用的就是基类中的 area方法了</span></span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（三）</title>
    <url>/2020/01/07/C-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:22 GMT+0800 (中国标准时间) --><p><strong>goto语句</strong><br>goto语句不常用，主要是跳转到某个标签。</p><a id="more"></a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> label;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"i = "</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">label:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"label ==== label"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line">label ==== label</span><br></pre></td></tr></table></figure></div><p><strong>产生随机数rand()</strong><br>rand()会产生一个0～RAND_MAX之间的一个数<br>产生随意的十个随机数：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MATLAB"><figure class="iseeu highlight /matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; <span class="number">10</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">"rand = "</span>&lt;&lt;<span class="built_in">rand</span>()<span class="comment">%10&lt;&lt;endl;// 产生10个0～10的随机数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>rand()产生随机数和种子有关，需要使用srand()函数产生一个种子。<br><code>srand((unsigned)time(null));</code><br>其他一些产生两个数之间随机数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GCODE"><figure class="iseeu highlight /gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(a,b)</span> <span class="comment">(rand()</span><span class="meta">%</span><span class="comment">(b-a+1)</span>)+a<span class="number">-1</span></span><br><span class="line">[a,b) <span class="comment">(rand()</span><span class="meta">%</span><span class="comment">(b-a)</span>)+a</span><br><span class="line"><span class="comment">(a,b] (rand()</span><span class="meta">%</span><span class="comment">(b-a)</span>)+a<span class="number">+1</span></span><br><span class="line">[a,b] <span class="comment">(rand()</span><span class="meta">%</span><span class="comment">(b-a+1)</span>)+a</span><br></pre></td></tr></table></figure></div><p><strong>指针</strong><br>指针是一个变量<br>变量的值其他变量的值的地址<br>&amp; 是取地址符 * 是定义一个指针</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">int</span> *p = i;<span class="comment">// 定义了一个int类型的指针</span></span><br><span class="line"><span class="comment">// *p = i;   p = &amp;i;</span></span><br></pre></td></tr></table></figure></div><p><strong>引用</strong><br>定义的时候如果使用&amp;就是引用<br>可以有空指针不能有空引用<br>引用的必须声明的时候进行初始化<br>引用一旦初始化不能再指向其他的对象<br>引用就是所引用对象的一个别名<br>引用可以作为<strong>函数参数</strong>，和<strong>返回值</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> &amp;b = a;<span class="comment">// 声明的时候初始化</span></span><br><span class="line"><span class="comment">// int &amp;b; // 不能这样写  如果是指针可以这样做</span></span><br><span class="line"><span class="comment">// b = i; // 引用初始化后不能再指向其他的对象或变量</span></span><br><span class="line">b = <span class="number">200</span>; <span class="comment">//改变b的值a的值也会跟着变化 b就是a的一个别名</span></span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（二）</title>
    <url>/2020/01/07/C-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:23 GMT+0800 (中国标准时间) --><p><strong>常量const</strong><br>常量是不能被修改的<br>常量一般使用全大写进行声明是一个很好的习惯<br>不能是保留单词<br>多个单词可以用下划线进行链接<br>要见名知意<br><code>const int ANGER = 30;</code></p><a id="more"></a><p><strong>异常TryCatch</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">division</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果b = 0 抛出一个 异常</span></span><br><span class="line">    <span class="comment">// 当出现问题的时候 抛出一个 异常 通过 throw进行 捕获</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// throw 可以 跟 任意 表达式  表达式类型 决定了 抛出异常的类型</span></span><br><span class="line">        <span class="comment">// 例如 下面 是一个 字符串 异常 类型 就是 const char *msg</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"division by zero condision!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a/b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> z = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 保护代码 标示被激活的 异常 后面 可以 跟多个 catch语句</span></span><br><span class="line">        z = division(x, y);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">const</span> <span class="keyword">char</span> *msg) &#123;</span><br><span class="line">        <span class="comment">// terminating with uncaught exception of type char const* 如果类型 不对 会报错的 语句</span></span><br><span class="line">        <span class="comment">// 捕获异常 如果是... 可以捕获 任何 异常</span></span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;msg&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><strong>数据类型转换</strong><br>bool,char,short int, 枚举enum &gt;&gt; int &gt;&gt; long int &gt;&gt; long long int &gt;&gt; float &gt;&gt; double &gt;&gt; long double<br>如果是左边的数据类型转换到右边的数据类型是自动转换，因为右边的数据类型占有的内存空间大 可以放下左边的数据类型。<br>如果是右边的数据类型转换为左边的数据类型是强制类型转换。</p><p><strong>数组Array</strong><br>数组定义：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> x[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">int</span> y[<span class="number">5</span>];</span><br><span class="line"> <span class="built_in">int</span> length = sizeof(y)/sizeof(y[<span class="number">0</span>]);<span class="comment">// 数组长度</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">     y[i] = i;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">int</span> z[<span class="number">5</span>];</span><br><span class="line"> z[<span class="number">3</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></div><p>// 定义动态的数组vector</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #include &lt;vector&gt; // 要导入这个头文件</span></span><br><span class="line"><span class="comment">// 创建 一个 向量 用于 存储数组</span></span><br><span class="line"><span class="comment">// 类似 链表</span></span><br><span class="line"><span class="comment">// 定义了 一个 用于 存储 整形的  向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出 vec 的 大小</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"vector size:"</span>&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 向量 中 追加 5个 整数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">    vec.push_back(j);<span class="comment">// 压栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加后 vec的 大小</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"vector size:"</span>&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">vec.pop.back();<span class="comment">// 出栈</span></span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础（一）</title>
    <url>/2020/01/07/C-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:22 GMT+0800 (中国标准时间) --><p><strong>输入输出</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入x的值："</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br></pre></td></tr></table></figure></div><a id="more"></a><p><strong>sizeof用法</strong><br><code>cout&lt;&lt;&quot;int size of :&quot;&lt;&lt;sizeof(int)&lt;&lt;endl;</code><br>sizeof(int) 是计算int类型所占的内存空间<br>结果:int size of :4</p><p><strong>typedef用法：</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> fee;</span><br><span class="line">fee a = <span class="number">10</span>;    <span class="comment">// 也就是 int a = 10;</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// a = 10</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(fee)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></div><p>typedef意思是给int从新取一个名字 fee 和 int 是一样的 也可以说fee是int的一个别名</p><p><strong>枚举：</strong><br>枚举的定义：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="THRIFT"><figure class="iseeu highlight /thrift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方法：推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">days</span></span>&#123;</span><br><span class="line">    firstday,</span><br><span class="line">    secondday,</span><br><span class="line">    thirdday</span><br><span class="line">&#125; day;</span><br><span class="line"><span class="comment">// 第二种方法：</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    firstday,</span><br><span class="line">    secondday,</span><br><span class="line">    thirdday</span><br><span class="line">&#125; day;</span><br><span class="line"><span class="comment">// 第三种方法：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    firstday = <span class="number">3</span>,</span><br><span class="line">    secondday,</span><br><span class="line">    thirdday</span><br><span class="line">&#125; Day;</span><br></pre></td></tr></table></figure></div><p>使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROCESSING"><figure class="iseeu highlight /processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">days <span class="built_in">day</span> = firstday;<span class="comment">// 或 day = firstday</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">day</span> == firstday)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">"day == firstday"</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="built_in">day</span> = firstday;</span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line">Day <span class="built_in">day</span> = secondday;</span><br></pre></td></tr></table></figure></div><p>// 枚举类型不一定非要定义到函数中，<br>// 枚举中参数是从0开始的，可以给指定数值，后面是从该数值上计算</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line">day = thirdday;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> firstday:</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"firstday"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> secondday:</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"secondday"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> thirdday:&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"thirday"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>数据类型</strong><br>基本数据类型：整形short int, int, long int， 浮点型 float, double, char类型，bool类型。<br>派生类型：枚举enum，指针*，数组[], 结构体struct，联合类型union，类class。<br>空类型：void。</p><p><strong>字符串string</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="code"><pre><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="string">"World"</span>;</span><br><span class="line">    <span class="built_in">string</span> s3;</span><br><span class="line">    <span class="built_in">string</span> s4;</span><br><span class="line">    <span class="keyword">size_t</span> lens;</span><br><span class="line">    </span><br><span class="line">    s3 = s1;<span class="comment">// 字符串复制到另外一个字符串上面 </span></span><br><span class="line">    <span class="comment">// strcpy(s3, s1); // C中使用函数strcpy</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"s3 = "</span>&lt;&lt;s3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    s4 = s1 + s2;<span class="comment">// 字符串拼接 C中使用strcat(s1, s2);</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"s4 = "</span>&lt;&lt;s4&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    lens = s1.<span class="built_in">size</span>();<span class="comment">// 字符串长度 C中使用的是strlen(s1);</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"lengs = "</span>&lt;&lt;lens&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    判断 是不是 为空</span></span><br><span class="line">    <span class="keyword">if</span> (s1.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"s is empty"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"s is not empty and s size is:"</span>&lt;&lt;s1.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><strong>结构体struct</strong><br>定义一个结构体:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种 Person是结构体的名字 没有定义变量使用的时候定义变量</span></span><br><span class="line"><span class="comment">// 推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">bool</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 结构体的使用</span></span><br><span class="line">    Person p;</span><br><span class="line">    p.age = <span class="number">12</span>;</span><br><span class="line">    p.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    p.sex = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"age = "</span>&lt;&lt;p.age&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"name = "</span>&lt;&lt;p.name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sex = "</span>&lt;&lt;p.sex&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 结构体的生命也有三种形式</span></span><br><span class="line"><span class="comment">// 第二种：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">bool</span> sex;</span><br><span class="line">&#125;p;</span><br><span class="line"><span class="comment">// p是结构体的变量可以直接使用</span></span><br><span class="line">p.age = <span class="number">32</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"age = "</span>&lt;&lt;p.age&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 第三种：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">bool</span> sex;</span><br><span class="line">&#125;p;</span><br><span class="line"><span class="comment">// p是结构体体Person的别名 定义变量的时候都可以使用</span></span><br><span class="line">    Person p;</span><br><span class="line">    p.age = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    person p1;</span><br><span class="line">    p1.age = <span class="number">32</span>;</span><br></pre></td></tr></table></figure></div><p>// 结构体可以作为函数的参数进行传递，</p><p><strong>联合内行union</strong><br>联合类型类似结构体，但是跟结构体不同的是：联合类型运行不同的数据类型访问相同的内存，因为这些数据变量在内存中的同一位置，联合类型的大小是这些数据变量中数据类型最大的那个。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> Student &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">float</span> score;</span><br><span class="line">&#125;s;</span><br><span class="line"></span><br><span class="line">    s.age = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"name = "</span>&lt;&lt;s.age&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"score = "</span>&lt;&lt;s.score&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></div><p><strong>宏定义</strong><br>宏定义一般变量都要大写<br>宏定义的意义就是<strong>替换</strong><br>宏定义后面不能跟冒号</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14  <span class="comment">// 一般宏定义</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN(a,b) (a&lt;b?a:b) <span class="comment">// 带参数的宏定义</span></span></span><br><span class="line"><span class="comment">// 判断宏定义 如果没有定义某个宏定义就定义某个宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DEBUG</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// # 会把令牌转换为双引号引用的字符串</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> MKSTR(x) #x</span></span><br><span class="line"><span class="comment">//  等价于 #define MKSTR(x) "x"</span></span><br><span class="line"><span class="comment">// ## 用于链接两个令牌</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONCAT(a, b)  a##b</span></span><br><span class="line"><span class="comment">// 等价于 // #define CONCAT(a,b) ab</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一些 预定义 宏</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __LINE__ : "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 该语句位于哪一行</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __FILE__ : "</span> &lt;&lt; __FILE__ &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 当前文件的路径位置</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __DATE__ : "</span> &lt;&lt; __DATE__ &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 当前日期</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __TIME__ : "</span> &lt;&lt; __TIME__ &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 当前时间</span></span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++基础</tag>
      </tags>
  </entry>
  <entry>
    <title>无论您多成功，康宝莱马克休斯成功语录都值得看</title>
    <url>/2020/01/07/%E5%BA%B7%E5%AE%9D%E8%8E%B1%E9%A9%AC%E5%85%8B%E4%BC%91%E6%96%AF%E8%AF%AD/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:23 GMT+0800 (中国标准时间) --><h3 id="1-你必须用来自心底的爱来对待和影响他人。"><a href="#1-你必须用来自心底的爱来对待和影响他人。" class="headerlink" title="1 你必须用来自心底的爱来对待和影响他人。"></a>1 你必须用来自心底的爱来对待和影响他人。</h3><h3 id="2-你的成功，你一生的高度，取决于你的想象力和敬业程度"><a href="#2-你的成功，你一生的高度，取决于你的想象力和敬业程度" class="headerlink" title="2 你的成功，你一生的高度，取决于你的想象力和敬业程度"></a>2 你的成功，你一生的高度，取决于你的想象力和敬业程度</h3><h3 id="3-想要成功，必先端正态度，财富随之而来。想要成功，必先树立信念，财富随之而来。"><a href="#3-想要成功，必先端正态度，财富随之而来。想要成功，必先树立信念，财富随之而来。" class="headerlink" title="3 想要成功，必先端正态度，财富随之而来。想要成功，必先树立信念，财富随之而来。"></a>3 想要成功，必先端正态度，财富随之而来。想要成功，必先树立信念，财富随之而来。</h3><a id="more"></a><h3 id="4-你的成功取决于你每天为了实现梦想而采取的行动，而不是短期内获得的蝇头小利。"><a href="#4-你的成功取决于你每天为了实现梦想而采取的行动，而不是短期内获得的蝇头小利。" class="headerlink" title="4 你的成功取决于你每天为了实现梦想而采取的行动，而不是短期内获得的蝇头小利。"></a>4 你的成功取决于你每天为了实现梦想而采取的行动，而不是短期内获得的蝇头小利。</h3><h3 id="5-我们在康宝莱所奉行的诚信不仅在当下给予我们回报，更会在将来带给我们福祉。"><a href="#5-我们在康宝莱所奉行的诚信不仅在当下给予我们回报，更会在将来带给我们福祉。" class="headerlink" title="5 我们在康宝莱所奉行的诚信不仅在当下给予我们回报，更会在将来带给我们福祉。"></a>5 我们在康宝莱所奉行的诚信不仅在当下给予我们回报，更会在将来带给我们福祉。</h3><h3 id="6-是不是所有人都能在康宝莱获得成功？-是的！只要你愿意来采取行动，付出努力。"><a href="#6-是不是所有人都能在康宝莱获得成功？-是的！只要你愿意来采取行动，付出努力。" class="headerlink" title="6 是不是所有人都能在康宝莱获得成功？   是的！只要你愿意来采取行动，付出努力。"></a>6 是不是所有人都能在康宝莱获得成功？ 是的！只要你愿意来采取行动，付出努力。</h3><h3 id="7-每天做最好的自己。第二天比第一天做得好。第三天比第二天做得更好。每天都有新的进步。"><a href="#7-每天做最好的自己。第二天比第一天做得好。第三天比第二天做得更好。每天都有新的进步。" class="headerlink" title="7 每天做最好的自己。第二天比第一天做得好。第三天比第二天做得更好。每天都有新的进步。"></a>7 每天做最好的自己。第二天比第一天做得好。第三天比第二天做得更好。每天都有新的进步。</h3><h3 id="8-始终如一，几十年如一日。"><a href="#8-始终如一，几十年如一日。" class="headerlink" title="8 始终如一，几十年如一日。"></a>8 始终如一，几十年如一日。</h3><h3 id="9-人们需要你的激励。"><a href="#9-人们需要你的激励。" class="headerlink" title="9 人们需要你的激励。"></a>9 人们需要你的激励。</h3><h3 id="10-从一开始就要保持积极的心态。"><a href="#10-从一开始就要保持积极的心态。" class="headerlink" title="10 从一开始就要保持积极的心态。"></a>10 从一开始就要保持积极的心态。</h3><h3 id="11-你使康宝莱成为一个亲密无间的大家庭。"><a href="#11-你使康宝莱成为一个亲密无间的大家庭。" class="headerlink" title="11 你使康宝莱成为一个亲密无间的大家庭。"></a>11 你使康宝莱成为一个亲密无间的大家庭。</h3><h3 id="12-我会陪伴你一直走下去"><a href="#12-我会陪伴你一直走下去" class="headerlink" title="12 我会陪伴你一直走下去"></a>12 我会陪伴你一直走下去</h3><h3 id="13-相信自己的市场，相信我们做得到。"><a href="#13-相信自己的市场，相信我们做得到。" class="headerlink" title="13 相信自己的市场，相信我们做得到。"></a>13 相信自己的市场，相信我们做得到。</h3><h3 id="14-我们的未来一片光明。"><a href="#14-我们的未来一片光明。" class="headerlink" title="14 我们的未来一片光明。"></a>14 我们的未来一片光明。</h3><p><img src="https://upload-images.jianshu.io/upload_images/3718166-d5aecf53513dba1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1281578362316_.pic.jpg"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>康宝莱</category>
      </categories>
      <tags>
        <tag>康宝莱</tag>
        <tag>健康与营养</tag>
        <tag>马克休斯语录</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT博客搭建相册功能2</title>
    <url>/2020/01/03/Hexo-NexT%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD2/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:22 GMT+0800 (中国标准时间) --><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>按照<a href="https://www.yiai520.top/2020/01/03/Hexo-NexT%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD1/">Hexo+NexT博客搭建相册功能（一）</a>搭建好相册库</p><a id="more"></a><h2 id="增加相册STYLE"><a href="#增加相册STYLE" class="headerlink" title="增加相册STYLE"></a>增加相册STYLE</h2><p>在next主题路径下面添加<a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">photo.swig</a>页面</p><p>路径如下：</p><blockquote><p><code>themes/next/layout</code></p></blockquote><h2 id="生成相册页面"><a href="#生成相册页面" class="headerlink" title="生成相册页面"></a>生成相册页面</h2><blockquote><p><code>hexo new page “photos”</code></p></blockquote><p>修改photos下的index.md文件， <a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">index.md下载地址</a><br>其中 <code>&lt;a href=&quot;https://zhaopan7011.github.io&quot; target=&quot;_blank&quot; class=&quot;open-ins&quot;&gt;图片正在加载中…&lt;/a&gt;</code>中的 url 替换成你的博客地址<br>需要的三个css文件以及js文件都在我的图片仓库地址中<a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">blog_photo地址</a><br>全部下载下来放到photos文件夹下面 其中<code>photoswipe.css</code>和<code>default-skin</code>是查看图片插件的css， 需要修改 ins.js 的 120和121行的 url 为你 <code>github</code>的图片的网址<br><em><a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">ins.css</a></em><br><em><a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">photoswipe.css</a></em><br><em><a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">default-skin</a></em><br><em><a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">ins.js</a></em><br>同时需要将文件夹assets同时复制到您的photos文件夹下面</p><h2 id="查看相册插件PHOTOSWIPE"><a href="#查看相册插件PHOTOSWIPE" class="headerlink" title="查看相册插件PHOTOSWIPE"></a>查看相册插件PHOTOSWIPE</h2><p>photoswipe参考网址<a href="https://photoswipe.com/" target="_blank" rel="noopener">https://photoswipe.com/</a><br>将js文件 <a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">photoswipe.min.js</a><br>和<a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">photoswipe-ui-default.min.js</a><br>添加到主题文件中，<br>js存放路径为</p><blockquote><p>themes/next/source/js/src</p></blockquote><h2 id="引用js文件"><a href="#引用js文件" class="headerlink" title="引用js文件"></a>引用js文件</h2><p>在<code>themes/next/layout/_scripts/pages/post-details.swig</code> 中插入</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(theme.js) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/src/photoswipe.min.js?v=</span></span></span><span class="template-variable">&#123;&#123; theme.version &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(theme.js) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/src/photoswipe-ui-default.min.js?v=</span></span></span><span class="template-variable">&#123;&#123; theme.version &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><h3 id="在根目录中加入标签"><a href="#在根目录中加入标签" class="headerlink" title="在根目录中加入标签"></a>在根目录中加入标签</h3><p>在路径<code>themes/next/layout/_layout.swig</code>中插入查看图片的标签代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DJANGO"><figure class="iseeu highlight /django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.type === "photos" %&#125;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__scroll-wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__ui pswp__ui--hidden"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__top-bar"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--close"</span> <span class="attr">title</span>=<span class="string">"Close (Esc)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--share"</span> <span class="attr">title</span>=<span class="string">"Share"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--fs"</span> <span class="attr">title</span>=<span class="string">"Toggle fullscreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--zoom"</span> <span class="attr">title</span>=<span class="string">"Zoom in/out"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- element will get class pswp__preloader--active when preloader is running --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__icn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__cut"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--left"</span> <span class="attr">title</span>=<span class="string">"Previous (arrow left)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--right"</span> <span class="attr">title</span>=<span class="string">"Next (arrow right)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption__center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></div><p>到此相册查看插件photoswipe已经配置完毕.<br>可以到我的博客地址查看效果<a href="https://www.yiai520.top/photos/">https://www.yiai520.top/photos/</a></p><h2 id="博客图片添加流程"><a href="#博客图片添加流程" class="headerlink" title="博客图片添加流程"></a>博客图片添加流程</h2><ul><li>在 blog_photo(本地github图片仓库文件夹)里面加入图片,图片路径在 photos 里面 图片命名方式 yyyy-MM-dd_图片描述.jpg/jpeg/gif/png</li><li>执行 python3 tool.py</li><li>切换到博客myblog 目录下 提交博客查看 <code>hexo g -d</code></li><li>输入网址查看照片</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客相册</tag>
        <tag>Hexo+NexT</tag>
        <tag>图片存储</tag>
        <tag>图片浏览</tag>
        <tag>PHOTOSWIPE</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT博客搭建相册功能1</title>
    <url>/2020/01/03/Hexo-NexT%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD1/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:22 GMT+0800 (中国标准时间) --><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>1、使用<code>github</code>作为图床（也可以使用七牛和阿里的存储作为图床）<br><em>使用github有时候可能图片显示不出来 建议使用腾讯云</em><br>2、使用脚本在source目录中data.json的文件，用来保存提交到<code>github</code>上面图片的名字和路径url等<br>3、读取json中的内容在博客中展示图片</p><a id="more"></a><h2 id="1-创建相册库"><a href="#1-创建相册库" class="headerlink" title="1 创建相册库"></a>1 创建相册库</h2><p>在github上创建一个仓库blog_photo（名字随意），创建两个子目录 photos和min_photos,把需要上传的相册图片放到photos文件夹下面。</p><blockquote><p>相册名字名字方式：<code>yyyy-MM-dd_图片描述.png/jpg</code></p></blockquote><h2 id="2-图片处理"><a href="#2-图片处理" class="headerlink" title="2 图片处理"></a>2 图片处理</h2><p>下载完整的python脚本地址 <a href="https://github.com/zhaopan7011/blog_photo" target="_blank" rel="noopener">tool.py下载地址</a><br>需要对<code>tool.py</code>文件中的内容进行修改，将<code>../myblog/source/photos/data.json</code>改为你自己的本地博客地址。<br>然后cd到图片仓库的文件夹中 <code>cd blog_photo</code><br>执行脚本:<code>python3 tool.py</code><br>执行完脚本会在本地博客文件夹中生成dada.json文件</p><h4 id="QA"><a href="#QA" class="headerlink" title="QA:"></a>QA:</h4><p>如果出现 from PIL import Image 这里报错.说明没有 PIL 这个库.<br>执行 <code>python3 -m pip install Pillow</code></p><p><a href="https://www.yiai520.top/2020/01/03/Hexo-NexT%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD2/">Hexo+Next博客搭建相册功能2</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客相册</tag>
        <tag>Hexo+NexT</tag>
        <tag>图片存储</tag>
        <tag>python脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/20/hello-world/</url>
    <content><![CDATA[<!-- build time:Wed Jan 08 2020 10:05:23 GMT+0800 (中国标准时间) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>你好</tag>
        <tag>Welcome</tag>
        <tag>标签</tag>
      </tags>
  </entry>
</search>
